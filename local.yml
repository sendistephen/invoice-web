version: '3'

services:
  # API
  api:
    restart: always
    build:
      context: .
      dockerfile: ./docker/local/express/Dockerfile
    volumes:
      - /app/node_modules
      - .:/app
    depends_on:
      - mongodb
    # ports:
    #   - '1993:1993'
    environment:
      NODE_ENV: ${NODE_ENV}
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb
      FORCE_COLOR: 1
    networks:
      - invoice

  # Client (reactjs)
  client:
    build:
      context: ./client
      dockerfile: ./docker/local/Dockerfile
    restart: on-failure
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - invoice

  # MongoDB
  mongodb:
    image: mongo
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb-data:/data/db
    networks:
      - invoice

  # MongoDB Express
  mongo-express:
    image: mongo-express:1.0.2-20-alpine3.19
    depends_on:
      - mongodb
    ports:
      - '8081:8081'
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    networks:
      - invoice

  # Mailhog
  mailhog:
    image: mailhog/mailhog
    ports:
      - '8025:8025'
      - '1025:1025'
    networks:
      - invoice

  # Nginx
  nginx:
    build:
      context: ./docker/local/nginx
      dockerfile: Dockerfile
    ports:
      - '8080:80'
    restart: always
    depends_on:
      - api
    volumes:
      - static_volume:/app/staticfiles
      - pdf_volume:/app/docs
    networks:
      - invoice

# Networks
networks:
  invoice:
    driver: bridge

# Volumes
volumes:
  mongodb-data:
  static_volume:
  pdf_volume:

